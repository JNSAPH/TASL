// Mongoose
const mongoose = require('mongoose')
const ShortUrl = require('./models/shortUrl')
mongoose.connect('mongodb://localhost/urlShortener', {
    useNewUrlParser: true, useUnifiedTopology: true
})

// Express Setup
const express = require('express')
const cors = require('cors')
const session = require('express-session')
const port = 3000

// Express packages
const app = express();
app.use(cors({origin: ["http://localhost:4200"], credentials: true}));
app.use(session({
    secret: "require('crypto').randomBytes(1024).toString('base64')",
    name:'TASL-Login-Cookie',
    resave: true,
    saveUninitialized: false,
}));

const config = require('./config.json')

// Routes
app.get('/:shortUrl', async (req, res) => {
    const full = await ShortUrl.findOne({ short: req.params.shortUrl })
    full.clicks++
    full.save();

    res.redirect(full.full)
})

// Customshort gets Generated by Angular Frontend
app.post('/TASL/createShort/', async (req, res) => {
    //if (req.session.loggedin == false || req.session.loggedin == undefined) return res.send({ code: 401 }).status(401) // Check if User is Logged in

    if (!req.headers.long || !req.headers.short) return res.send({ code: 400 }).status(400)
    if (await ShortUrl.exists({ short: req.headers.short })) return res.send({ code: 400, message: "Short ID already in use." })

    await ShortUrl.create({
        full: req.headers.long,
        short: req.headers.short
    })
    res.send({ code: 201 }).status(201)
})

app.get('/TASL/getShortDetails/:shortUrl', async (req, res) => {
    //if (!req.session.loggedin || req.session.loggedin == undefined) return res.send({ code: 401 }).status(401) // Check if User is Logged in

    const shortUrl = await ShortUrl.findOne({ short: req.params.shortUrl })
    if (shortUrl === null) return res.send({ code: 404 }).status(404)

    res.send({
        code: 200,
        full: shortUrl.full
    }).status(200)
})

app.get('/TASL/getShortDetails/', async (req, res) => {
    //if (req.session.loggedin == false || req.session.loggedin == undefined) return res.send({ code: 401 }).status(401) // Check if User is Logged in

    res.send(await ShortUrl.find()).status(200)
})

app.post('/TASL/deleteShort', (req, res) => {
    //if (req.session.loggedin == false || req.session.loggedin == undefined) return res.send({ code: 401 }).status(401) // Check if User is Logged in

    ShortUrl.deleteOne({ short: req.headers.short }, function (err) {
        if (err) return res.send(err)
    })

    res.send({ code: 200 }).status(200)
})

app.get('/TASL/getStats', async (req, res) => {
    console.log("/getStats | " + JSON.stringify(req.session.loggedin))
    if (req.session.loggedin == false || req.session.loggedin == undefined) return res.send({ code: 401 }).status(401) // Check if User is Logged in

    let clicks = 0;
    let shortUrls = (await ShortUrl.find())

    for (let index = 0; index < shortUrls.length; index++) {
        const element = shortUrls[index];
        clicks += element.clicks
    }

    res.send({
        totalUrls: shortUrls.length,
        totalClicks: clicks,
        short: shortUrls
    })
})

app.post('/TASL/login', (req, res) => {
    let adminPassword = config.password;
    let adminUsername = config.username;

    console.log(req.session.loggedin)

    if (adminPassword == req.headers.password && adminUsername == req.headers.username) {
        req.session.loggedin = true;
        console.log("/login success | " + req.session.loggedin)
        return res.send({ code: 200, message: "Logged in.", resp: req.session.loggedin }).status(200)
    } else {
        req.session.loggedin = false;
        console.log("/login failed | " + req.session.loggedin)
        return res.send({
            code: 418,
            message: "Incorrect Username and or Password."
        }).status(418)
    }
})

app.get('/TASL/logout', (req, res) => {
    req.session.destroy();
    res.send({ code: 200 })
})

app.listen(port, () => {
    console.log(`ThatsaShort.link Backend listening at http://localhost:${port}`)
})
